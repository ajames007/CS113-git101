#include <stdio.h>
#include <stdlib.h>

int main()
{
    // Statements and Blocks = expression -> statements เมื่อปิดด้วย ;
    // เครื่องหมาย {} ใช้รวมส่วนของ declarations และ statements ->block

    // If-Esles = เรามักจะเขียนในรูป if(expression) แทนที่จะเขียน if(expression != 0)
    int a = 0;
    if (a)
        printf("a = 1");
    else
        printf("No!! a = 0\n");

    printf("---------------------------------------\n");

    // Esle-If = ถ้า expression ตัวไหนมีค่าเป็นจริง statement ที่เกี่ยวข้องก็จะถูกทำงาน

    int b = 5;
    if (b == 1)
    printf("b = 1");
    else if (b == 3)
        printf("b = 3");
    else if (b == 5)
        printf("b = 5\n");

    printf("---------------------------------------\n");

    // Switch = ใช้ตรวจสอบดูเงื่อนไข โดยจะทำเรื่อยๆหาก expression นั้นตรงกันจนกว่าจะเจอ break
    char grade;
    printf("Enter your Grade: ");
    scanf("%c",&grade);
    switch(grade){
        case 'A':
            printf("4\n");
            break;
        case 'B':
            printf("3\n");
            break;
        case 'C':
            printf("2\n");
            break;
        case 'D':
            printf("1\n");
            break;
        default:
            printf("Invalid Grade!!\n");
    }
    printf("---------------------------------------\n");

    // Loops while and for 
    // 1.while ถ้า expression เป็นจริง statements จะถูกทำงานจนกว่า expression จะเป็นเท็จ

    while (b <10)
    {
        printf("b = %d\n",b);
        b++;
    }
    printf("---------------------------------------\n");

    // 2.for expr1 จะกำหนดค่า expr2 เป็นจริงลูปจะทำงาน expr3 จเป็นการ step ขึ้นไปเรื่อยๆ

    for (int  i = 5; i < 10; i++)
    {
        printf("same as b i = %d\n",i);
    }
    printf("---------------------------------------\n");
    
    // Loops Do while = statements จะถูกทำงานก่อน แล้วจึงค่อยไปเข็ึค expressionว่าเป็นจริงหรือเป็นเท็จ

    do
    {
        printf("one time bcuz so tried\n");
    } while (0);
    printf("---------------------------------------\n");

    // break and continue 
    // break = ทำให้โปรแกรมหลุดออกจากลูป
    // continue = บังคับลูปให้กลับขึ้นไปเช็ค expression ใหม่

    return 0;
}